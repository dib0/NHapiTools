<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHapiTools.Base</name>
    </assembly>
    <members>
        <member name="T:NHapiTools.Base.Configuration.BaseMessageRuleElement">
            <summary>
            configuration elements
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseMessageRuleElement.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseMessageRuleElement.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseMessageRuleElement.MessageType">
            <summary>
            Message type
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseMessageRuleElement.TriggerEvent">
            <summary>
            Trigger event
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.BaseRuleElement">
            <summary>
            Configuration element
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseRuleElement.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseRuleElement.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.BaseRuleElement.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.EncodingRuleElement">
            <summary>
            Rule element
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageFieldIntOnlyRuleElement">
            <summary>
            Rule element
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageFieldIntOnlyRuleElement.FieldIndicator">
            <summary>
            Field indicator
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageFieldIntOnlyRuleElement.AllowNull">
            <summary>
            Allow null
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageFieldMandatoryRuleElement">
            <summary>
            Configuration element
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageFieldMandatoryRuleElement.FieldIndicator">
            <summary>
            Field Indicator
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageRegExRuleElement">
            <summary>
            Configuration element
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRegExRuleElement.FieldIndicator">
            <summary>
            Field indicator
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRegExRuleElement.RegEx">
            <summary>
            RegEx
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRegExRuleElement.AllowNull">
            <summary>
            Allow null
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageRuleElement">
            <summary>
            Rule element
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageRuleElementCollection`1">
            <summary>
            Element collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.Item(System.Int32)">
            <summary>
            This
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.Add(`0)">
            <summary>
            Add
            </summary>
            <param name="ruleElement"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.Remove(`0)">
            <summary>
            Remove
            </summary>
            <param name="ruleElement"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove at
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.Remove(System.String)">
            <summary>
            Remove
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.CreateNewElement">
            <summary>
            Create new element
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Configuration.MessageRuleElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get element key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Configuration.MessageRulesSection">
            <summary>
            Section
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRulesSection.SegmentMandatoryRule">
            <summary>
            Rule collection
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRulesSection.MessageRegExRules">
            <summary>
            Rule collection
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRulesSection.MessageFieldIntOnlyRules">
            <summary>
            Rule collection
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.MessageRulesSection.MessageFieldMandatoryRule">
            <summary>
            Rule collection
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.PrimitiveRuleElement">
            <summary>
            Rule element
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.RuleElementCollection`1">
            <summary>
            Element collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NHapiTools.Base.Configuration.RuleElementCollection`1.Item(System.Int32)">
            <summary>
            this
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.Add(`0)">
            <summary>
            Add
            </summary>
            <param name="ruleElement"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.Remove(`0)">
            <summary>
            Remove
            </summary>
            <param name="ruleElement"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove at
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.Remove(System.String)">
            <summary>
            Remove
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.CreateNewElement">
            <summary>
            Create new element
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Configuration.RuleElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get element key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Configuration.SegmentMandatoryRule">
            <summary>
            Configuration element
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.SegmentMandatoryRule.MadatorySegment">
            <summary>
            Mandatory segment
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Configuration.ValidationSection">
            <summary>
            Validation section
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.ValidationSection.EncodingRules">
            <summary>
            Rules
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.ValidationSection.MessageRules">
            <summary>
            Rules
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Configuration.ValidationSection.PrimitiveTypeRules">
            <summary>
            Rules
            </summary>
        </member>
        <member name="T:NHapiTools.Base.CustomImplementation.V21.Messages.ACK">
            <summary>
            Represents a ACK message structure (see chapter ). This structure contains the
                         following elements:
                        <ol><li>0: MSH (Message header segment) </li><li>1: MSA (Message acknowledgement segment) </li><li>2: ERR (Error segment) optional </li></ol>
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.MSH">
            <summary>
            Returns MSH (Message header segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.MSA">
            <summary>
            Returns MSA (Message acknowledgement segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.ERR">
            <summary>
            Returns ERR (Error segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.#ctor(NHapi.Base.Parser.IModelClassFactory)">
            <summary>
            Creates a new ACK Group with custom IModelClassFactory.
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.#ctor">
            <summary>
            Creates a new ACK Group with DefaultModelClassFactory.
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V21.Messages.ACK.init(NHapi.Base.Parser.IModelClassFactory)">
            <summary>
            initalize method for ACK.  This does the segment setup for the message.
            
            </summary>
        </member>
        <member name="T:NHapiTools.Base.CustomImplementation.V22.Messages.ACK">
            <summary>
            Represents a ACK message structure (see chapter ). This structure contains the
                         following elements:
                        <ol><li>0: MSH (Message header segment) </li><li>1: MSA (Message acknowledgement segment) </li><li>2: ERR (Error segment) optional </li></ol>
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.MSH">
            <summary>
            Returns MSH (Message header segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.MSA">
            <summary>
            Returns MSA (Message acknowledgement segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="P:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.ERR">
            <summary>
            Returns ERR (Error segment) - creates it if necessary
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.#ctor(NHapi.Base.Parser.IModelClassFactory)">
            <summary>
            Creates a new ACK Group with custom IModelClassFactory.
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.#ctor">
            <summary>
            Creates a new ACK Group with DefaultModelClassFactory.
            
            </summary>
        </member>
        <member name="M:NHapiTools.Base.CustomImplementation.V22.Messages.ACK.init(NHapi.Base.Parser.IModelClassFactory)">
            <summary>
            initalize method for ACK.  This does the segment setup for the message.
            
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Extensions">
            <summary>
            Provides multiple extension methods on the NHapi Base classes.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Extensions.GetRecords(System.Object,System.String,System.String)">
            <summary>
            Get an array of objects from the HL7 message following the NHapi generated structure xxyyRepetitionsUsed and Getxxyy(int rep).
            Use with caution: only use when these properties are available.
            </summary>
            <param name="container">Containter object (inherited from IMessage, ISegment of IGroup</param>
            <param name="property">Name of the property. E.g. xxyyRepetitionsUsed</param>
            <param name="method">Name of the Get method. E.g. Getxxyy</param>
            <returns>Array of objects. Null if none existed.</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.GetAllRecords``1(System.Object,System.String,System.String)">
            <summary>
            Get a generic list from the HL7 message following the NHapi generated structure xxyyRepetitionsUsed and Getxxyy(int rep).
            Use with caution: only use when these properties are available.
            </summary>
            <typeparam name="T">Type of objects that are returned.</typeparam>
            <param name="container">Containter object (inherited from IMessage, ISegment of IGroup</param>
            <param name="property">Name of the property. E.g. xxyyRepetitionsUsed</param>
            <param name="method">Name of the Get method. E.g. Getxxyy</param>
            <returns>Generic list with results</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.SegmentExists(NHapi.Base.Parser.PipeParser,NHapi.Base.Model.IMessage,System.String)">
            <summary>
            Check if a segment existed in the original message.
            </summary>
            <param name="parser">Parser base class</param>
            <param name="message">Message to be checked</param>
            <param name="segment">Segment name to check</param>
            <returns>True if segment was found in the original message</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.GenerateAck(NHapi.Base.Model.IMessage,NHapiTools.Base.Util.AckTypes,System.String,System.String)">
            <summary>
            Generate an Ack message based on current message.
            </summary>
            <param name="message">Current message object</param>
            <param name="ackType">Ack response type</param>
            <param name="appCommName">Application communication name</param>
            <param name="envName">Environment name</param>
            <returns>Ack message based on the current message</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.GenerateAck(NHapi.Base.Model.IMessage,NHapiTools.Base.Util.AckTypes,System.String,System.String,System.String)">
            <summary>
            Generate an Ack message based on current message.
            </summary>
            <param name="message">Current message object</param>
            <param name="ackType">Ack response type</param>
            <param name="appCommName">Application communication name</param>
            <param name="envName">Environment name</param>
            <param name="errorMessage">Error message to include in Ack (in case op AE or AR)</param>
            <returns>Ack message based on the current message</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.IsEqual(NHapi.Base.Model.ISegment,NHapi.Base.Model.ISegment)">
            <summary>
            Adds a method to check equality between to segment objects
            </summary>
            <param name="a">First segment</param>
            <param name="b">Second segment</param>
            <returns>True if the segments are equal</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.IsEqual(NHapi.Base.Model.IMessage,NHapi.Base.Model.IMessage)">
            <summary>
            Adds a method to check equality between to message objects
            </summary>
            <param name="a">First message</param>
            <param name="b">Second message</param>
            <returns>True if the messages are equal</returns>
        </member>
        <member name="M:NHapiTools.Base.Extensions.IsEqual(NHapi.Base.Model.IMessage,NHapi.Base.Model.IMessage,System.Boolean)">
            <summary>
            Adds a method to check equality between to message objects
            </summary>
            <param name="a">First message</param>
            <param name="b">Second message</param>
            <param name="completeCompare">Besides checking the structure name, version, event type and message ID, if this is true the complete textual version of the two messages will be compared.</param>
            <returns>True if the messages are equal</returns>
        </member>
        <member name="T:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream">
            <summary>
            This stream filters out Base64 encoded data from HL7 messages that are being read over a stream
            The Base64 data is stored in separate memory streams. The data in the message is replaced by the Id
            which can be used to get the right memory stream.
            </summary>
        </member>
        <member name="F:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Attachments">
            <summary>
            Attachments
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.HasAttachments">
            <summary>
            Has attachments
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="encapsulatedStream">Stream to encapsulate</param>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Flush">
            <summary>
            Flushes the stream
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream.
            </summary>
            <param name="value">Length</param>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read the next byte(s) from the stream.
            </summary>
            <param name="buffer">Buffer to put the result in.</param>
            <param name="offset">Location to start reading.</param>
            <param name="count">Amount of bytes to read from the stream.</param>
            <returns></returns>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Length">
            <summary>
            Get the length of the stream.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Position">
            <summary>
            Get current posistion in the stream.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writing the stream is not implemented.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.CanRead">
            <summary>
            Is the stream readable?
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.CanSeek">
            <summary>
            Is the stream searchable?
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.CanWrite">
            <summary>
            Is the stream writeable?
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7FilterBase64AttachmentsStream.ReadToEnd">
            <summary>
            Read to the end of the stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator">
            <summary>
             Reads from an InputStream containing a stream of encoded HL7 messages and iterates over those messages. This class is geared towards reading from files,
             and tries to be very lenient about the format of the stream, specifically concerning control characters and line endings. 
             It should be safe to provide a stream containing Windows or Unix line endings (which will be treated as segment delimiters). It is also safe to 
             provide a stream containing MLLP control blocks before and after each message (although these will not be validated! 
             Do not use this class to read MLLP messages from a socket stream!)
             The input stream could, for example, be a FileInputStream reading from a text file containing a number of HL7 messages in plain text format. 
            
             This is a port of the Hl7InputStreamMessageIterator from the HAPI project.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="inStream">Input stream to read from.</param>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.Current">
            <summary>
            Get the current message.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.IgnoreComments">
            <summary>
            Ignore reading comments in the messages
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns>True if next item available.</returns>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageEnumerator.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="T:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator">
            <summary>
            Reads from an InputStream containing a stream of encoded HL7 messages and iterates over those messages. This class is geared towards reading from files, 
            and tries to be very lenient about the format of the stream, specifically concerning control characters and line endings. 
            It should be safe to provide a stream containing Windows or Unix line endings (which will be treated as segment delimiters). 
            It is also safe to provide a stream containing MLLP control blocks before and after each message (although these will not be validated! 
            Do not use this class to read MLLP messages from a socket stream!)
            
            This is a port of the Hl7InputStreamMessageStringIterator from the HAPI project.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="inStream">Input stream to read from.</param>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.Current">
            <summary>
            Get the current message.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.IgnoreComments">
            <summary>
            Ignore reading comments in the messages
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns>True if next item available.</returns>
        </member>
        <member name="M:NHapiTools.Base.IO.HL7InputStreamMessageStringEnumerator.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="T:NHapiTools.Base.IO.FileCompletedEventArgs">
            <summary>
            Event args for file completed event
            </summary>
        </member>
        <member name="F:NHapiTools.Base.IO.FileCompletedEventArgs.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="T:NHapiTools.Base.IO.MultipleFilesStream">
            <summary>
            Stream class for reading multiple files from a directory as one stream.
            Especially handy when using the HL7InputStreamMessageIterator on a complete directory with messages.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.FileEndMarker">
            <summary>
            Gets / sets the character used for
            marking the end of a file.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.#ctor(System.Collections.Generic.List{System.IO.FileStream})">
            <summary>
            Constructor
            </summary>
            <param name="streams">List of streams to read from</param>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="files">List of files to read as one stream.</param>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Constructor
            </summary>
            <param name="directory">Directory containing files to read as one stream.</param>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="directory">Directory containing files to read as one stream.</param>
            <param name="searchPattern">Searchpattern / filter for filenames.</param>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.Flush">
            <summary>
            Flushes the stream
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream.
            </summary>
            <param name="value">Length</param>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read the next byte(s) from the stream.
            </summary>
            <param name="buffer">Buffer to put the result in.</param>
            <param name="offset">Location to start reading.</param>
            <param name="count">Amount of bytes to read from the stream.</param>
            <returns></returns>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.Length">
            <summary>
            Get the length of the stream.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.Position">
            <summary>
            Get current posistion in the stream.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writing the stream is not implemented.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.CanRead">
            <summary>
            Is the stream readable?
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.CanSeek">
            <summary>
            Is the stream searchable?
            </summary>
        </member>
        <member name="P:NHapiTools.Base.IO.MultipleFilesStream.CanWrite">
            <summary>
            Is the stream writeable?
            </summary>
        </member>
        <member name="M:NHapiTools.Base.IO.MultipleFilesStream.OnFileCompleted(NHapiTools.Base.IO.FileCompletedEventArgs)">
            <summary>
            Event will be raised when a file is done reading.
            The event args will contain the filename.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="E:NHapiTools.Base.IO.MultipleFilesStream.FileCompleted">
            <summary>
            Event on file end reached
            </summary>
        </member>
        <member name="T:NHapiTools.Base.ModelToolsGenerator.Generator">
            <summary>
            Source generation of extension methods on specific Model version assemblies
            of NHapi.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.ModelToolsGenerator.Generator.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="targetAssemblyFile">Assembly (NHapi model assembly) to generate source from.</param>
            <param name="outDir">Directory to generate source to.</param>
        </member>
        <member name="M:NHapiTools.Base.ModelToolsGenerator.Generator.Generate">
            <summary>
            Start source generation.
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Model.GenericMessageWrapper">
            <summary>
            Generic Abstract message implementation. This implementation is similar to the Generic+V2x implementation
            of NHapi with two differences:
            1. This Generic message is version indifferent.
            2. This Generic message wraps the original message.
            
            This Generic message wrapper is used to be able to overwrite (default) segments, that will otherwise not be possible 
            using NHapi. By wrapping the message and copying the content segments can be overwritten.
            
            This Message wrapper is to be used with the EnhancedModelClassFactory.
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Model.GenericMessageWrapper.Version">
            <summary>
            Get the HL7 version of the message
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Model.GenericMessageWrapper.#ctor(NHapi.Base.Parser.IModelClassFactory)">
            <summary>
            Constructor
            </summary>
            <param name="factory">Model Class Factory</param>
        </member>
        <member name="M:NHapiTools.Base.Model.GenericMessageWrapper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Model.GenericMessageWrapper.Unwrap">
            <summary>
            Unwraps the originally parsed message and tries to copy any information
            to it.
            </summary>
            <returns>Unwrapped message</returns>
        </member>
        <member name="M:NHapiTools.Base.Model.GenericMessageWrapper.GetSegment``1(System.String)">
            <summary>
            Get a specific segment from the message. If any segment was overwritten and could not fully be
            copied to the wrapped message, it can be retreived using this method.
            </summary>
            <typeparam name="T">Segment type.</typeparam>
            <param name="segmentName">Segment name to retreive.</param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Net.SimpleMLLPClient">
            <summary>
            A implementation fo easy use: sending HL7 messages over a TCP/IP + MLLP connection
            and receiving a reply
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="hostname">Hostname to connect to.</param>
            <param name="port">Port</param>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.#ctor(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="hostname">Hostname to connect to.</param>
            <param name="port">Port</param>
            <param name="encoding">Encoding of the byte stream (Default utf-8)</param>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.EnableSsl">
            <summary>
            Use SSL to encrypt the communication
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.AddCertificate(System.String,System.String)">
            <summary>
            Adds a client side certificate. The certificate is used for client side authentication
            </summary>
            <param name="pathToCertificate">Path to the local .pfx file</param>
            <param name="password">Password of the certificate</param>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.SendHL7Message(NHapi.Base.Model.IMessage)">
            <summary>
            Send a HL7 message
            </summary>
            <param name="message">Message to send</param>
            <returns>Reply message</returns>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.SendHL7Message(System.String,System.Double)">
            <summary>
            Send a HL7 message
            </summary>
            <param name="message">Message to send</param>
            <param name="timeout">Read timeout, throws exception when receiving no data until timeout</param>
            <returns>Reply message</returns>
            <exception cref="T:System.TimeoutException">throws exception on read timeout</exception>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.Disconnect">
            <summary>
            Disconnect from the server
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.Dispose">
            <summary>
            Disposes the connection
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Net.SimpleMLLPClient.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            The following method is invoked by the RemoteCertificateValidationDelegate.
            This allows you to check the certificate and accept or reject it
            return true will accept the certificate
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Parser.EnhancedModelClassFactory">
            <summary>
            Different implementation of the DefaultModelClassFactory. The Enhanced Factory provides the 
            possibility to wrap parsed messages in a GenericMessageWrapper, providing the possibility
            to overwrite segments with a custom implementation.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Parser.EnhancedModelClassFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Parser.EnhancedModelClassFactory.ValidationContext">
            <summary>
            Validation context.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Parser.EnhancedModelClassFactory.GetMessageClass(System.String,System.String,System.Boolean)">
            <summary>
            Get Message class
            </summary>
            <param name="theName"></param>
            <param name="theVersion"></param>
            <param name="isExplicit"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Parser.EnhancedModelClassFactory.GetSegmentClass(System.String,System.String)">
            <summary>
            Get type of segment
            </summary>
            <param name="theName"></param>
            <param name="theVersion"></param>
            <returns></returns>
        </member>
        <member name="M:NHapiTools.Base.Parser.EnhancedModelClassFactory.GetSpecificMessageClass">
            <summary>
            Get specific message class
            </summary>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Util.AckTypes">
            <summary>
            Acknowledgemend types
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Util.AckTypes.AA">
            <summary>
            Application Accept. Send if message processing was fine.
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Util.AckTypes.AE">
            <summary>
            Application Error. Send if an error occured while processing.
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Util.AckTypes.AR">
            <summary>
            // Application Reject. Send if the application does not support of accepts the messages.
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Util.Ack">
            <summary>
            Provides an easy interface to generate Ack messages based on incoming messages
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Util.Ack.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="applicationCommunicationName">Communication name of the software.</param>
            <param name="envIdentifier">Environment identifier.</param>
        </member>
        <member name="M:NHapiTools.Base.Util.Ack.MakeACK(NHapi.Base.Model.IMessage)">
            <summary>
            Create an Ack message based on a received message
            </summary>
            <param name="inboundMessage">received message</param>
            <returns>Created ACK message</returns>
        </member>
        <member name="M:NHapiTools.Base.Util.Ack.MakeACK(NHapi.Base.Model.IMessage,NHapiTools.Base.Util.AckTypes,System.String)">
            <summary>
            Create an Ack message based on a received message
            </summary>
            <param name="inboundMessage">received message</param>
            <param name="ackResult">Send AA, AE or AR message.</param>
            <param name="errorMessage">The reason the message was rejected or an error. If "AA" was supplied as ackCode the errorMessage should be null.</param>
            <returns>Created ACK message</returns>
        </member>
        <member name="T:NHapiTools.Base.Util.MLLP">
            <summary>
            This helper class supports the Minimum Low Layer Protocol
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Util.MLLP.StripMLLPContainer(System.Text.StringBuilder)">
            <summary>
            Validate MLLP message
            </summary>
            <param name="sb">Stringbuilder containing the message</param>
        </member>
        <member name="M:NHapiTools.Base.Util.MLLP.ValidateMLLPMessage(System.Text.StringBuilder)">
            <summary>
            Validate the MLLP message containing the HL7 message
            </summary>
            <param name="sb">Message</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:NHapiTools.Base.Util.MLLP.CreateMLLPMessage(System.String)">
            <summary>
            Create a MLLP message
            </summary>
            <param name="p">Original message</param>
            <returns>MLLP message</returns>
        </member>
        <member name="M:NHapiTools.Base.Util.MLLP.IsStartCharacter(System.Char)">
            <summary>
            Test if the character equals the start message character
            </summary>
            <param name="start">Character to test</param>
            <returns>True if matches</returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.AutomatedContext">
            <summary>
            The automated context loads all validation rules in a given namespace. The validation
            rules have to implement the specific validation type interfaces to be applied to the right messages.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.AutomatedContext.#ctor">
            <summary>
            Constructor (without original context)
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.AutomatedContext.#ctor(NHapi.Base.Validation.IValidationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="origContext">The original context. Rules from this context will be copied.</param>
        </member>
        <member name="M:NHapiTools.Base.Validation.AutomatedContext.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Validation.BaseContext">
            <summary>
            Base class for the different contexts
            </summary>
            <inheritdoc />
        </member>
        <member name="F:NHapiTools.Base.Validation.BaseContext.encodingRules">
            <summary>
            Encoding rules
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Validation.BaseContext.messageRules">
            <summary>
            Message rules
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Validation.BaseContext.primitiveTypeRules">
            <summary>
            Primitive rules
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Validation.BaseContext.MessageRuleCount">
            <summary>
            Message rule count
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Validation.BaseContext.EncodingRuleCount">
            <summary>
            Encoding rule count
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Validation.BaseContext.PrimitiveRuleCount">
            <summary>
            Primitive rule count
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.#ctor(NHapi.Base.Validation.IValidationContext)">
            <summary>
            Constructor
            </summary>
            <param name="origContext"></param>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.getEncodingRules(System.String,System.String)">
            <summary>
            Get encoding rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theEncoding">an encoding name (eg "VB", "XML).</param>
            <returns> the active encoding rules that apply to the given version and encoding.</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.getMessageRules(System.String,System.String,System.String)">
            <summary>
            Get message rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theMessageType">a value valid for MSH-9-1.</param>
            <param name="theTriggerEvent">a value valid fro MSH-9-2.</param>
            <returns>
            the active rules that apply to message of the given version, message type,
            and trigger event.
            </returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.getPrimitiveRules(System.String,System.String,NHapi.Base.Model.IPrimitive)">
            <summary>
            Get primitive rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theTypeName">a primitive datatype name (eg "ST").</param>
            <param name="theType">the Primitive being validated.</param>
            <returns>
            active rules for checking the given type in the given version.
            </returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.GetPrimitiveRules(System.String,System.String,NHapi.Base.Model.IPrimitive)">
            <summary>
            Get primitive rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theTypeName">a primitive datatype name (eg "ST").</param>
            <param name="theType">the Primitive being validated.</param>
            <returns>
            active rules for checking the given type in the given version.
            </returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.GetMessageRules(System.String,System.String,System.String)">
            <summary>
            Get message rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theMessageType">a value valid for MSH-9-1.</param>
            <param name="theTriggerEvent">a value valid fro MSH-9-2.</param>
            <returns>
            the active rules that apply to message of the given version, message type,
            and trigger event.
            </returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.BaseContext.GetEncodingRules(System.String,System.String)">
            <summary>
            Get encoding rules
            </summary>
            <param name="theVersion">an HL7 version (eg "2.1").</param>
            <param name="theEncoding">an encoding name (eg "VB", "XML).</param>
            <returns>
            the active encoding rules that apply to the given version and encoding.
            </returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.ConfigurableContext">
            <summary>
            The configurable context loads the validation rules from the configuration file. The validation
            rules have to implement the specific validation type interfaces to be applied to the right messages.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.ConfigurableContext.#ctor">
            <summary>
            Constructor (without original context)
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.ConfigurableContext.#ctor(NHapi.Base.Validation.IValidationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="origContext">The original context. Rules from this context will be copied.</param>
        </member>
        <member name="M:NHapiTools.Base.Validation.ConfigurableContext.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Validation.ISpecificEncodingRule">
            <summary>
            This provides a more specific interface thant the original IEncodingRule. Implementations
            of this interface are to be used with the AutomatedContext or ConfigurableContext
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificEncodingRule.GetVersions">
            <summary>
            Get the versions the rule applies to.
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with versions.</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificEncodingRule.GetEncodings">
            <summary>
            Get the encodings the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with encodings.</returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.ISpecificMessageRule">
            <summary>
            This provides a more specific interface thant the original IMessageRule. Implementations
            of this interface are to be used with the AutomatedContext or ConfigurableContext
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificMessageRule.GetVersions">
            <summary>
            Get the versions the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with versions</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificMessageRule.GetMessageTypes">
            <summary>
            Get the message type the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with message types</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificMessageRule.GetTriggerEvents">
            <summary>
            Get the trigger events the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with trigger events.</returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.ISpecificPrimitiveTypeRule">
            <summary>
            This provides a more specific interface thant the original IPrimitiveTypeRule. Implementations
            of this interface are to be used with the AutomatedContext or ConfigurableContext
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificPrimitiveTypeRule.GetVersions">
            <summary>
            Get the versions the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with versions.</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.ISpecificPrimitiveTypeRule.GetTypeNames">
            <summary>
            Get the types the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with types.</returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.Rule.BaseMessageRule">
            <summary>
            Base class for the implementation of message rules to be used
            with the AutomatedContext or the Configurable context.
            
            Adds functionality on the IMessageRule to add versions, types and events
            that the rule applies to.
            </summary>
        </member>
        <member name="F:NHapiTools.Base.Validation.Rule.BaseMessageRule.messageRules">
            <summary>
            Message rules
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.BaseMessageRule.GetVersions">
            <summary>
            Get the versions the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with versions</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.BaseMessageRule.GetMessageTypes">
            <summary>
            Get the message type the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with message types</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.BaseMessageRule.GetTriggerEvents">
            <summary>
            Get the trigger events the rule applies to
            Use the wildcard '*' to apply to all versions (use with care)
            </summary>
            <returns>List with trigger events.</returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.BaseMessageRule.test(NHapi.Base.Model.IMessage)">
            <summary>
            Tests the given (fully populated) message against the criteria
            defined by this rule class.
            </summary>
            <returns>
            A list of exceptions indicating points at which the given
            message failed to validate (empty if validation succeeds; may
            not be a complete list as testing may be aborted after failure).
            The list should be empty if this rule is evaluated against a type
            of message to which it doesn't apply.
            </returns>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.BaseMessageRule.Test(NHapi.Base.Model.IMessage)">
            <summary>
            Tests the given (fully populated) message against the criteria
            defined by this rule class.
            </summary>
            <returns>
            A list of exceptions indicating points at which the given
            message failed to validate (empty if validation succeeds; may
            not be a complete list as testing may be aborted after failure).
            The list should be empty if this rule is evaluated against a type
            of message to which it doesn't apply.
            </returns>
        </member>
        <member name="P:NHapiTools.Base.Validation.Rule.BaseMessageRule.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:NHapiTools.Base.Validation.Rule.BaseMessageRule.SectionReference">
            <summary>
            Section reference
            </summary>
        </member>
        <member name="T:NHapiTools.Base.Validation.Rule.MessageFieldIntOnlyRule">
            <summary>
            Implementation of a message rule that checks one or more configurable fields. These field must
            contain numbers that can be parsed to an int.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageFieldIntOnlyRule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageFieldIntOnlyRule.test(NHapi.Base.Model.IMessage)">
            <summary>
            Test
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.Rule.MessageFieldMandatoryRule">
            <summary>
            Implementation of a message rule that checks one or more configurable fields. These field must
            have a value (cannot be "" or null).
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageFieldMandatoryRule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageFieldMandatoryRule.test(NHapi.Base.Model.IMessage)">
            <summary>
            Test
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.Rule.MessageRegExRule">
            <summary>
            Implementation of a message rule that checks one or more configurable fields. In the configuration
            a regular expression must be given to be applied to these fields. The value in the fields must match the
            regular expressions.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageRegExRule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageRegExRule.test(NHapi.Base.Model.IMessage)">
            <summary>
            Test
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:NHapiTools.Base.Validation.Rule.MessageSegmentMandatoryRule">
            <summary>
            Implementation of a message rule that checks one or more configurable segments. The segments must
            exist in the received message.
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageSegmentMandatoryRule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NHapiTools.Base.Validation.Rule.MessageSegmentMandatoryRule.test(NHapi.Base.Model.IMessage)">
            <summary>
            Test
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
    </members>
</doc>
